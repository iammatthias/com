---
export const prerender = false;

import Layout from "@layouts/layout.astro";
import BreadCrumb from "@components/breadcrumb.astro";
import { getObsidianTags } from "@lib/github.ts";
getObsidianTags();

interface SlugPathPair {
  slug: string;
  path: string;
  title: string;
}

interface Tags {
  [key: string]: SlugPathPair[];
}

const isStaging = import.meta.env.MODE === "development";

const tags: Tags = await fetch(
  isStaging
    ? "https://pub-ba3d6ef16e5c44b7b4b89835777f6653.r2.dev/tags-staging.json"
    : "https://pub-ba3d6ef16e5c44b7b4b89835777f6653.r2.dev/tags.json"
).then((res) => res.json());
---

<Layout>
  <main>
    <BreadCrumb />
    <h1>Tags</h1>
    <ul class='masonry' x-data x-masonry>
      {
        Object.entries(tags).map(([tag, posts]) => (
          <div>
            <h2>
              <a href={`/tags/${tag}`}>{tag}</a>
            </h2>

            <ul>
              {posts.map(({ slug, path, title }) => (
                <li>
                  <p>
                    <small>
                      <a href={`/${path}/${slug}`}>{title}</a>
                    </small>
                  </p>
                </li>
              ))}
            </ul>
          </div>
        ))
      }
    </ul>
    <BreadCrumb />
  </main>
</Layout>

<script>
  import Alpine from "alpinejs";
  import masonry from "alpinejs-masonry";

  // @ts-ignore
  Alpine.plugin(masonry);
</script>

<style>
  h2 {
    font-size: var(--fs-h5);
  }
  h2 a {
    color: inherit;
  }

  p a {
    color: inherit;
  }
  ul,
  li {
    list-style: none;
    padding: 0;
  }

  ul ul li {
    list-style: circle;
    margin-left: 1rem;
  }

  .masonry {
    display: grid;
    gap: 2rem;
    align-items: flex-start;
  }

  .masonry > div {
    border: 1px solid var(--foreground);
    border-radius: 0.5rem;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  /* Large devices (desktops, 992px and up) */
  @media (min-width: 992px) {
    .masonry {
      grid-template-columns: repeat(4, minmax(0, 1fr));
    }
  }

  /* Medium devices (tablets, 768px and up) */
  @media (min-width: 768px) and (max-width: 991px) {
    .masonry {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }

  /* Small devices (landscape phones, 576px and up) */
  @media (min-width: 576px) and (max-width: 767px) {
    .masonry {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }

  /* Extra small devices (portrait phones, less than 576px) */
  @media (max-width: 575px) {
    .masonry {
      grid-template-columns: repeat(1, minmax(0, 1fr));
      grid-gap: 1rem;
    }
  }
</style>
