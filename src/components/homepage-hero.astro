---

---

<section class='background'>
  <div class='imageContainer'>
    <img
      id='backgroundImage1'
      loading='eager'
      decoding='async'
      alt='fullscreen background'
      src='https://pub-ba3d6ef16e5c44b7b4b89835777f6653.r2.dev/hero_images/19cf518030046371396ba9e1d94cba65.jpg'
      class='backgroundImage active'
    />
    <img
      id='backgroundImage2'
      loading='eager'
      decoding='async'
      alt='fullscreen background'
      src=''
      class='backgroundImage'
    />
  </div>
</section>

<style>
  .background {
    position: sticky;
    top: 0;
    height: 100%;
    width: 100%;
  }
  .imageContainer {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
    border: 1px solid var(--foreground);
    border-radius: 1.5rem;
    display: block;
    box-shadow: var(--smooth-shadow);
    @media (max-width: 768px) {
      border-radius: 2rem;
      aspect-ratio: 16 / 9;
    }
  }
  .backgroundImage {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0;
    transition: opacity 2s ease-in-out;
    will-change: opacity;
  }
  .backgroundImage.active {
    opacity: 1;
    z-index: 1;
  }
  .backgroundImage.fade-out {
    opacity: 0;
    z-index: 2;
  }
</style>

<script>
  async function fetchImageUrls() {
    try {
      const response = await fetch("/api/hero-image");
      if (!response.ok) {
        console.error("Failed to fetch:", response.status);
        return [];
      }
      const data = await response.json();
      return data.imageUrls || [];
    } catch (error) {
      console.error("Error fetching image URLs:", error);
      return [];
    }
  }

  function preloadImage(url) {
    return new Promise<string>((resolve) => {
      const img = new Image();
      img.onload = () => resolve(url);
      img.src = url;
    });
  }

  async function changeImage(imageUrls) {
    if (imageUrls.length === 0) {
      console.error("No image URLs available");
      return;
    }

    const imageElement1 = document.getElementById("backgroundImage1") as HTMLImageElement;
    const imageElement2 = document.getElementById("backgroundImage2") as HTMLImageElement;

    if (!imageElement1 || !imageElement2) {
      console.error("Background image elements not found");
      return;
    }

    let activeImageElement = imageElement1;
    let inactiveImageElement = imageElement2;

    while (true) {
      const randomImgIndex = Math.floor(Math.random() * imageUrls.length);
      const randomImgUrl = imageUrls[randomImgIndex];

      try {
        const preloadedUrl = await preloadImage(randomImgUrl);
        inactiveImageElement.src = preloadedUrl;

        // Start cross-fade
        inactiveImageElement.classList.add("active");
        activeImageElement.classList.add("fade-out");

        // Wait for transition to complete
        await new Promise((resolve) => setTimeout(resolve, 2000));

        // Reset classes
        activeImageElement.classList.remove("active", "fade-out");

        [activeImageElement, inactiveImageElement] = [inactiveImageElement, activeImageElement];
      } catch (error) {
        console.error("Error preloading image:", error);
      }

      await new Promise((resolve) => setTimeout(resolve, 6000)); // Wait for 8 seconds before next transition
    }
  }

  async function init() {
    const imageUrls = await fetchImageUrls();
    await changeImage(imageUrls);
  }

  init();
</script>
