---
export const prerender = false;

import Layout from "@layouts/layout.astro";

// Parameters are received from the URL defined by the static paths
const { hash } = Astro.params;

const processedHash = hash!.substring(2); // Assumes the key is pre-validated or error handling is in place
---

<Layout path=`Portraits of Private Keys`>
  <main>
    <div id='grid' class='grid'></div>
  </main>

  <div id='hash' style='display: none;'>{processedHash}</div>
</Layout>

<script>
  let privateKey;
  let grid;
  document.addEventListener("astro:page-load", () => {
    const hashElement = document.getElementById("hash");
    const gridElement = document.getElementById("grid");

    if (hashElement && gridElement) {
      privateKey = hashElement.innerHTML;
      grid = gridElement;
      setupGridCells();
      setupBackgroundAnimation();
    }
  });

  function setupGridCells() {
    for (let i = 0; i < privateKey.length; i++) {
      const char = privateKey[i].toLowerCase();
      const value = parseInt(char, 16);
      const cell = createCell(char, value);
      grid.appendChild(cell);
    }
  }

  function createCell(hexChar, value) {
    const cell = document.createElement("div");
    cell.className = "cell";
    const innerCell = document.createElement("div");
    innerCell.className = "inner-cell";
    const size = 50 - value * 2;
    innerCell.style.width = `${size}%`;
    innerCell.style.backgroundColor = `#${hexChar}${hexChar}${hexChar}`;
    innerCell.style.animation = `pulse ${value + 1}s infinite ease-in-out`;
    cell.appendChild(innerCell);
    return cell;
  }

  function setupBackgroundAnimation() {
    const secondsSinceMidnight = new Date().getHours() * 3600 + new Date().getMinutes() * 60 + new Date().getSeconds();
    const totalSecondsInDay = 86400;
    const elapsedDayFraction = secondsSinceMidnight / totalSecondsInDay;
    const animationDurationSeconds = 86400; // Full cycle in seconds
    const animationStartDelaySeconds = elapsedDayFraction * animationDurationSeconds - animationDurationSeconds;

    document.body.style.animation = `colorCycle ${animationDurationSeconds}s infinite linear ${animationStartDelaySeconds}s`;
  }
</script>

<style>
  main {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    overflow: hidden; /* Prevents potential scrollbar issues */
    height: 100svh;
    animation: colorCycle 86400s infinite linear; /* 86400 seconds = 24 hours */
  }

  @keyframes colorCycle {
    0%,
    100% {
      background-color: #000;
    } /* Black */
    6.25% {
      background-color: #111;
    }
    12.5% {
      background-color: #222;
    }
    18.75% {
      background-color: #333;
    }
    25% {
      background-color: #444;
    }
    31.25% {
      background-color: #555;
    }
    37.5% {
      background-color: #666;
    }
    43.75% {
      background-color: #777;
    }
    50% {
      background-color: #888;
    }
    56.25% {
      background-color: #999;
    }
    62.5% {
      background-color: #aaa;
    }
    68.75% {
      background-color: #bbb;
    }
    75% {
      background-color: #ccc;
    }
    81.25% {
      background-color: #ddd;
    }
    87.5% {
      background-color: #eee;
    }
    93.75% {
      background-color: #fff;
    } /* White */
  }
</style>

<style is:global>
  :root {
    --grid-size: 8;
    --cell-size: calc(100% / var(--grid-size));
    --cell-height: calc(100% / var(--grid-size));
    --min-font-size: 12px;
    --max-font-size: 24px;
    --padding: 16px;
  }

  .grid {
    display: grid;
    grid-template-columns: repeat(var(--grid-size), 1fr);
    grid-template-rows: repeat(var(--grid-size), 1fr);
    gap: 4px;
    width: 100%;
    height: 100%;
    max-width: calc(var(--cell-size) * var(--grid-size));
    max-height: calc(var(--cell-height) * var(--grid-size));
    box-sizing: border-box;
  }

  .cell {
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: clamp(var(--min-font-size), 2.5vmin, var(--max-font-size));
    width: 100%;
    height: 100%;
  }

  .inner-cell {
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    animation-name: pulse;
    animation-duration: 2s;
    animation-iteration-count: infinite;
    aspect-ratio: 1;
  }

  @keyframes pulse {
    0%,
    100% {
      transform: scale(1);
      opacity: 1;
    }
    50% {
      transform: scale(1.3);
      opacity: 0.8;
    }
  }
</style>
