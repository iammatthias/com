---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

const { showTags = false, showCategory = false, showExcerpts = false, collection = "all", contentLimit } = Astro.props;

// Function to normalize collection name for display
const normalizeCollectionName = (slug: string): string => {
  if (slug === "all") return "All Content";
  return slug
    .split("-")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(" ");
};

// Optimize type definitions
interface ContentEntry {
  type: "content";
  title: string;
  slug: string;
  created: string;
  updated: string;
  published: boolean;
  tags: string[];
  path: string;
  excerpt?: string;
}

type ContentCollectionEntry = CollectionEntry<"content">;

// Type guard function
const isContentEntry = (entry: any): entry is ContentCollectionEntry => {
  return entry?.data?.title && entry?.data?.created && entry?.data?.slug;
};

// Get all content entries
const allEntries = await getCollection("content");
const contentEntries = allEntries.filter(isContentEntry);

// Filter by collection if specified
const filteredEntries =
  collection === "all" ? contentEntries : contentEntries.filter((entry) => entry.data.path === collection);

// Process content efficiently
const validContent = filteredEntries.filter((entry) => entry?.data?.created);

// Optimize sorting
const sortedContent = validContent
  .sort((a, b) => Number(new Date(b.data.created)) - Number(new Date(a.data.created)))
  .slice(0, contentLimit || validContent.length);

// Transform to ContentEntry efficiently
const entries: ContentEntry[] = sortedContent.map((entry) => ({
  type: "content",
  title: entry.data.title,
  slug: entry.data.slug,
  created: entry.data.created,
  updated: entry.data.updated,
  published: entry.data.published,
  tags: entry.data.tags,
  path: entry.data.path,
  excerpt: entry.data.excerpt,
}));
---

<div class='recent-content-container'>
  {
    showCategory && (
      <h2>
        <a href={`/${collection}`}>{normalizeCollectionName(collection)}</a>
      </h2>
    )
  }
  {
    entries.map((entry) => (
      <div class={`recent-content ${showCategory == false && "hide-first-border"}`}>
        <a href={`/${entry.path}/${entry.slug}`}>
          <h3>{entry.title}</h3>

          <p class='small'>
            Published {new Date(entry.created).toLocaleDateString()}
            {entry.updated &&
              new Date(entry.updated).getTime() - new Date(entry.created).getTime() > 24 * 60 * 60 * 1000 &&
              `Last updated ${new Date(entry.updated).toLocaleDateString()}`}
          </p>

          {showExcerpts && entry.excerpt && <p class='small'>{entry.excerpt}</p>}
        </a>
        {showTags && (
          <div class='tags'>
            {entry.tags.map((tag) => (
              <span class='small'>
                #<a href={`/tags/${tag}`}>{tag}</a>
              </span>
            ))}
          </div>
        )}
      </div>
    ))
  }
  {
    contentLimit && validContent.length > contentLimit && (
      <div class='view-all'>
        <a href={`/${collection}`}>View all {collection}</a>
      </div>
    )
  }
</div>

<style>
  a {
    text-decoration: none;
    border-bottom: none;
    color: inherit;
  }

  h2 {
    font-size: var(--fs-h4);
    text-transform: uppercase;
    padding-bottom: 0.5rem;
  }
  h3 {
    font-size: var(--fs-h5);
  }

  .recent-content-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .recent-content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    border-top: var(--border);
    padding-top: 1rem;
  }

  .hide-first-border:first-child {
    border-top: none;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    font-family: var(--font-mono);
  }

  .small {
    font-size: 12px;
  }

  .view-all {
    margin-top: 0.5rem;
    text-align: right;
  }

  .view-all a {
    font-size: 0.9rem;
    color: var(--color-text-secondary);
    border-bottom: var(--border);
    font-style: italic;
  }

  .view-all a:hover {
    text-decoration: underline;
  }
</style>
