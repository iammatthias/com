---
import { getCollection } from "astro:content";
import { Markdown } from "astro-remote";

// layouts
import PageLayout from "@/layouts/PageLayout.astro";

// components
import Paragraph from "@/components/MDX/Paragraph.astro";
import Img from "@/components/MDX/Img.astro";
import OfficeSpace from "@/components/MDX/OfficeSpace.astro";
import Vimeo from "@components/MDX/Vimeo.astro";
import Grid from "@components/MDX/Grid.astro";
import ContentChat from "@/components/svelte/ContentChat.svelte";

// Cache for processed markdown content
const markdownCache = new Map();

export async function getStaticPaths() {
  const content = await getCollection("content");

  // Filter entries to ensure they have path and slug
  const entries = content
    .filter((entry) => entry.data?.path && entry.data?.slug)
    .map((entry) => ({
      params: { path: entry.data.path, slug: entry.data.slug },
      props: {
        entry: {
          ...entry,
          body: entry.body?.trim() || "",
        },
      },
    }));

  return entries;
}

const { path } = Astro.params;
const { entry } = Astro.props;

const components = {
  p: Paragraph,
  img: Img,
  OfficeSpace,
  Vimeo,
  Grid,
};

// Process markdown with caching
const getCachedMarkdown = (content: string) => {
  if (markdownCache.has(content)) {
    return markdownCache.get(content);
  }
  return content;
};

const markdownContent = getCachedMarkdown(entry.body);
---

<PageLayout path={path}>
  <div class='content'>
    <div class='back-link'>
      <a href={`/${entry.data.path}`}>â†¢ {entry.data.path}</a>
    </div>

    <h1>{entry.data.title}</h1>

    <div class='meta'>
      <p>Published {new Date(entry.data.created).toLocaleDateString()}</p>
      {
        new Date(entry.data.updated).getTime() - new Date(entry.data.created).getTime() > 24 * 60 * 60 * 1000 && (
          <p>Updated {new Date(entry.data.updated).toLocaleDateString()}</p>
        )
      }
      <div class='tags'>
        {
          entry.data.tags.map((tag: any) => (
            <span>
              #<a href={`/tags/${tag}`}>{tag}</a>
            </span>
          ))
        }
      </div>
    </div>

    <article>
      <Markdown sanitize={{ allowComponents: true }} content={markdownContent} components={components} />
    </article>
  </div>

  <ContentChat entry={entry} client:only='svelte' />
</PageLayout>

<style>
  .content {
    width: 100%;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 0 1.5rem;
    flex-shrink: 0;
  }

  .back-link {
    font-size: 0.9rem;
    text-transform: capitalize;
  }

  .back-link a {
    color: var(--grey-dark);
    text-decoration: none;
    transition: color 0.2s;
  }

  .back-link a:hover {
    color: var(--color);
  }

  h1 {
    font-size: 2rem;
    font-weight: 700;
    line-height: 1.2;
    margin: 0;
    color: var(--color);
  }

  .meta {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: var(--grey-dark);
  }

  .meta p {
    margin: 0;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tags span {
    font-size: 0.8rem;
  }

  .tags a {
    color: var(--grey-dark);
    text-decoration: none;
    transition: color 0.2s;
  }

  .tags a:hover {
    color: var(--color);
  }

  article {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    line-height: 1.6;
    margin-top: 1rem;
  }

  @media (max-width: 768px) {
    .content {
      padding: 0 1rem;
    }

    h1 {
      font-size: 1.5rem;
    }

    .meta {
      font-size: 0.85rem;
    }
  }
</style>
