---
import "@fontsource-variable/kalnia/wdth.css";
import { SEO } from "astro-seo";
// import { ViewTransitions } from "astro:transitions";
import Nav from "@components/nav.astro";
import Ascii from "@components/ascii.astro";
// import Footer from "@components/footer.astro";

import "@styles/reset.css";
import "@styles/typography.css";
import "@styles/global.css";

interface Props {
  title?: string;
  path?: string;
}

const { title, path } = Astro.props;

let seoTitle = "@iammatthias";
if (title || path) {
  seoTitle = "";
  if (title) {
    seoTitle += `${title} | `;
  }
  if (path) {
    seoTitle += `${path.charAt(0).toUpperCase() + path.slice(1)} | `;
  }
  seoTitle += "@iammatthias";
}

const base_url = Astro.url.origin;

let seoImage = `${base_url}/api/og.png`;

if (title || path) {
  if (path) {
    seoImage = `${base_url}/api/og-${path}.png`;
  }
  if (title && path) {
    seoImage = `${base_url}/api/og-${path}-${encodeURIComponent(title)}.png`;
  }
}
---

<Ascii />
<html lang='en'>
  <head>
    <SEO
      charset='UTF-8'
      title={seoTitle}
      description='A digital garden.'
      openGraph={{
        basic: {
          title: seoTitle,
          type: "website",
          image: seoImage,
        },
        optional: {
          description: "A digital garden.",
        },
      }}
      twitter={{
        creator: "@iammatthias",
        card: "summary_large_image",
        image: seoImage,
        title: seoTitle,
        description: "A digital garden.",
      }}
      extend={{
        link: [
          {
            rel: "icon",
            href: "data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸŒž</text></svg>",
          },

          {
            rel: "sitemap",
            type: "application/xml",
            href: "/sitemap.xml",
          },
        ],
        meta: [
          {
            name: "viewport",
            content: "width=device-width, initial-scale=1",
          },
          {
            name: "generator",
            content: "Astro",
          },
        ],
      }}
    />
    <!-- <ViewTransitions /> -->
  </head>
  <>
    <div class='noise'></div>
    <Nav />
    <slot />
    <!-- <Footer /> -->
  </>

  <script>
    // post hog
    import posthog from "posthog-js";
    posthog.init("phc_m547PTGk57uBWEvaKQov39JeM7TOOCtcr98f4tmrImr", {
      api_host: "https://us.posthog.com",
    });
  </script>
  <script>
    import { keccak256 } from "viem";

    document.addEventListener("DOMContentLoaded", async () => {
      const currentTime = Date.now();

      // Retrieve stored session data
      const storedSessionHash = localStorage.getItem("sessionHash");
      const expirationTime = localStorage.getItem("expirationTime");

      // Set a default expiration time (1 hour)
      const defaultExpirationTime = 60 * 60 * 1000; // 1 hour in milliseconds

      // If the current session is valid and not expired, skip the data fetch and hash
      if (storedSessionHash && currentTime < Number(expirationTime)) {
        updateLastTransactionTime(currentTime, storedSessionHash);
      } else {
        // Session is expired or not found, fetch new data and update session
        const userAgent = navigator.userAgent;
        const ipResponse = await fetch("https://api.ipify.org?format=json");
        const { ip } = await ipResponse.json();

        // Hash the IP, user agent, and current time
        const sessionHash = keccak256(`0x${ip + userAgent + currentTime}`);

        localStorage.setItem("sessionHash", sessionHash);
        localStorage.setItem("expirationTime", (currentTime + defaultExpirationTime).toString());

        postSessionData(sessionHash);
      }
    });

    // Function to update the last transaction time
    function updateLastTransactionTime(currentTime, sessionHash) {
      const cooldownPeriod = 2000; // 2 seconds cooldown
      const lastTransactionTime = localStorage.getItem("lastTransactionTime");

      if (!lastTransactionTime || currentTime - Number(lastTransactionTime) >= cooldownPeriod) {
        localStorage.setItem("lastTransactionTime", currentTime.toString());
        postSessionData(sessionHash);
      } else {
        console.log("Duplicate, skipped sessionHash:", sessionHash);
      }
    }

    // Function to post session data
    async function postSessionData(sessionHash) {
      const path = window.location.pathname;

      const response = await fetch("/api/increment-hit-counter", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ sessionHash, path }),
      });

      const result = await response.json();
      console.log("Session and page view registered:", result);
    }

    // Update the expiration time on user interaction
    let debounceTimer;
    document.addEventListener("mousemove", () => {
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(() => {
        const currentTime = Date.now();
        localStorage.setItem("expirationTime", (currentTime + 60 * 60 * 1000).toString());
      }, 1000); // 1 second debounce time
    });
  </script>
</html>
