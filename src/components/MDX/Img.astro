---
const { src, alt, priority = false } = Astro.props;

// Extract the CID from the URL
const extractCid = (url: string) => {
  if (!url) {
    console.error("[Img.astro] No URL provided");
    return null;
  }

  // Remove any wsrv references
  let cleanUrl = url.replace("https://wsrv.nl/?url=", "");

  // Handle ipfs:// protocol
  if (cleanUrl.startsWith("ipfs://")) {
    const cid = cleanUrl.replace("ipfs://", "");
    return cid;
  }

  // Remove any query parameters
  cleanUrl = cleanUrl.replace(/\?.*$/, "");

  // If it's already a CID, return it
  if (cleanUrl.startsWith("Qm") || cleanUrl.startsWith("baf")) {
    return cleanUrl;
  }

  // If it's a full IPFS URL, extract the CID
  const ipfsMatch = cleanUrl.match(/\/ipfs\/([^/]+)/);
  if (ipfsMatch) {
    return ipfsMatch[1];
  }

  console.error("[Img.astro] Could not extract CID from URL:", url);
  return null;
};

const cid = extractCid(src);

if (!cid) {
  console.error("[Img.astro] Invalid image source:", src);
}

// Reduced srcset sizes to minimize API calls
const sizes = [{ width: 800 }];

// Function to get signed URL from Pinata
async function getSignedUrl(cid: string) {
  try {
    const baseUrl = "http://localhost:4321";
    const response = await fetch(`${baseUrl}/api/pinata?cid=${encodeURIComponent(cid)}`, {
      method: "POST",
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.error || `Failed to get signed URL: ${response.status}`);
    }

    const data = await response.json();
    if (!data.url) {
      throw new Error("No URL returned from Pinata API");
    }

    return data.url;
  } catch (error) {
    console.error("[Img.astro] Error fetching signed URL:", error);
    return null;
  }
}

// Only get the default image URL if it's a priority image
const defaultSrc = priority && cid ? (await getSignedUrl(cid)) || "" : "";
---

<div class='image-container' data-cid={cid}>
  <div class='placeholder'>
    <svg width='100' height='100' viewBox='0 0 100 100' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <rect width='100' height='100' fill='#F3F4F6'></rect>
      <path
        d='M50 30C44.4772 30 40 34.4772 40 40C40 45.5228 44.4772 50 50 50C55.5228 50 60 45.5228 60 40C60 34.4772 55.5228 30 50 30ZM50 45C47.2386 45 45 42.7614 45 40C45 37.2386 47.2386 35 50 35C52.7614 35 55 37.2386 55 40C55 42.7614 52.7614 45 50 45Z'
        fill='#9CA3AF'></path>
      <path
        d='M65 65H35C32.2386 65 30 67.2386 30 70V75C30 77.7614 32.2386 80 35 80H65C67.7614 80 70 77.7614 70 75V70C70 67.2386 67.7614 65 65 65ZM65 75H35V70H65V75Z'
        fill='#9CA3AF'></path>
    </svg>
  </div>
  <img src={defaultSrc} alt={alt} loading={priority ? "eager" : "lazy"} class='responsive-image' data-cid={cid} />
</div>

<style>
  .image-container {
    position: relative;
    width: 100%;
    background-color: #f3f4f6;
    min-height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    object-fit: contain;
    padding: 1rem;
  }

  .placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 1;
    transition: opacity 0.3s ease-in-out;
  }

  .placeholder.hidden {
    opacity: 0;
    pointer-events: none;
  }

  .responsive-image {
    width: 100%;
    height: auto;
    display: block;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .responsive-image.loaded {
    opacity: 1;
  }

  .responsive-image.error {
    opacity: 0;
  }
</style>

<script>
  // Simple image loader with viewport-based loading
  class ImageLoader {
    private observer: IntersectionObserver;
    private loadedImages = new Set<string>();
    private loadingImages = new Set<string>();
    private retryCount = new Map<string, number>();
    private maxRetries = 2;
    private pendingLoads = new Set<string>();
    private debounceTimeout: number | null = null;
    private lastScrollTime = 0;
    private scrollThrottle = 500; // ms between scroll events
    private loadQueue: Array<{ img: HTMLImageElement; cid: string }> = [];
    private processingQueue = false;

    constructor() {
      this.observer = new IntersectionObserver(
        (entries) => {
          const now = Date.now();
          if (now - this.lastScrollTime < this.scrollThrottle) {
            return;
          }
          this.lastScrollTime = now;

          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const img = entry.target as HTMLImageElement;
              const cid = img.dataset.cid;
              if (cid && !this.loadedImages.has(cid) && !this.loadingImages.has(cid) && !this.pendingLoads.has(cid)) {
                this.pendingLoads.add(cid);
                this.loadQueue.push({ img, cid });
                this.scheduleQueueProcessing();
              }
            }
          });
        },
        {
          rootMargin: "100% 0px", // Load images when they're one viewport height away
          threshold: 0.1,
        }
      );
    }

    private scheduleQueueProcessing() {
      if (this.debounceTimeout) {
        clearTimeout(this.debounceTimeout);
      }

      this.debounceTimeout = window.setTimeout(() => {
        this.processQueue();
      }, 250); // Debounce for 250ms
    }

    private async processQueue() {
      if (this.processingQueue || this.loadQueue.length === 0) return;
      this.processingQueue = true;

      try {
        // Process one image at a time
        const { img, cid } = this.loadQueue.shift()!;
        await this.loadImage(img, cid);

        // Add a small delay between processing images
        await new Promise((resolve) => setTimeout(resolve, 100));

        // Process next image if queue is not empty
        if (this.loadQueue.length > 0) {
          this.scheduleQueueProcessing();
        }
      } finally {
        this.processingQueue = false;
      }
    }

    async loadImage(img: HTMLImageElement, cid: string) {
      if (this.loadingImages.has(cid)) return;
      this.loadingImages.add(cid);
      this.pendingLoads.delete(cid);

      const container = img.closest(".image-container");
      const placeholder = container?.querySelector(".placeholder");
      if (!container || !placeholder) return;

      try {
        const response = await fetch(`/api/pinata?cid=${encodeURIComponent(cid)}`, {
          method: "POST",
          headers: {
            "Cache-Control": "no-cache",
            Pragma: "no-cache",
          },
        });

        if (!response.ok) throw new Error(`Failed to load image: ${response.status}`);

        const data = await response.json();
        if (!data.url) throw new Error("No URL returned");

        // Create a new image to test loading
        const testImage = new Image();
        testImage.onload = () => {
          img.src = data.url;
          img.classList.add("loaded");
          placeholder.classList.add("hidden");
          this.loadedImages.add(cid);
          this.loadingImages.delete(cid);
        };
        testImage.onerror = () => {
          this.handleError(img, cid, placeholder);
        };
        testImage.src = data.url;
      } catch (error) {
        this.handleError(img, cid, placeholder);
      }
    }

    private handleError(img: HTMLImageElement, cid: string, placeholder: Element) {
      const retries = this.retryCount.get(cid) || 0;
      if (retries < this.maxRetries) {
        this.retryCount.set(cid, retries + 1);
        setTimeout(
          () => {
            this.loadingImages.delete(cid);
            this.loadQueue.push({ img, cid });
            this.scheduleQueueProcessing();
          },
          Math.pow(2, retries) * 1000
        ); // Exponential backoff
      } else {
        img.classList.add("error");
        placeholder.classList.remove("hidden");
        this.loadingImages.delete(cid);
      }
    }

    observe(img: HTMLImageElement) {
      this.observer.observe(img);
    }

    unobserve(img: HTMLImageElement) {
      this.observer.unobserve(img);
    }

    destroy() {
      if (this.debounceTimeout) {
        clearTimeout(this.debounceTimeout);
      }
      this.observer.disconnect();
    }
  }

  // Initialize the loader
  const imageLoader = new ImageLoader();

  // Handle view transitions
  document.addEventListener("astro:page-load", () => {
    // Reset state for new page
    const images = document.querySelectorAll("img[data-cid]");
    images.forEach((img) => {
      if (img instanceof HTMLImageElement) {
        imageLoader.observe(img);
      }
    });
  });

  document.addEventListener("astro:before-preparation", () => {
    // Clean up before navigation
    const images = document.querySelectorAll("img[data-cid]");
    images.forEach((img) => {
      if (img instanceof HTMLImageElement) {
        imageLoader.unobserve(img);
      }
    });
    imageLoader.destroy();
  });

  // Initial load
  document.querySelectorAll("img[data-cid]").forEach((img) => {
    if (img instanceof HTMLImageElement) {
      if (img.getAttribute("loading") === "eager") {
        const cid = img.dataset.cid;
        if (cid) {
          imageLoader.loadImage(img, cid);
        }
      } else {
        imageLoader.observe(img);
      }
    }
  });
</script>
