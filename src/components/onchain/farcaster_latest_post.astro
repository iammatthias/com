---
// No server-side code needed
---

<div class='social-card'>
  <div class='user-info'>
    <img src='' alt='Profile picture' class='profile-pic' id='profilePic' />
    <div class='user-details'>
      <h2 id='displayName'></h2>
      <div class='user-details-row'>
        <p id='username'></p>
        <p id='timestamp' class='timestamp'></p>
      </div>
    </div>
  </div>

  <p id='postText' class='post-text'></p>
  <div id='embedContent' class='embed-content'></div>

  <div class='post-meta'>
    <a id='channelLink' class='channel' href='' target='_blank'></a>
    <div class='engagement'>
      <span id='reactions' class='engagement-item'>
        <svg width='18' height='18' viewBox='0 0 18 18' fill='none'
          ><path
            d='M9 16.0312L9.38813 16.7805C9.26819 16.8426 9.13508 16.8751 9 16.8751C8.86492 16.8751 8.73182 16.8426 8.61188 16.7805L8.60287 16.776L8.58263 16.7648C8.46482 16.7039 8.34853 16.6401 8.23387 16.5735C6.86271 15.7931 5.56911 14.8838 4.37063 13.8577C2.30062 12.0724 0 9.39375 0 6.1875C0 3.1905 2.34675 1.125 4.78125 1.125C6.52163 1.125 8.04712 2.02725 9 3.3975C9.95288 2.02725 11.4784 1.125 13.2188 1.125C15.6532 1.125 18 3.1905 18 6.1875C18 9.39375 15.6994 12.0724 13.6294 13.8577C12.3293 14.9693 10.9178 15.9434 9.41738 16.7648L9.39712 16.776L9.39038 16.7794H9.38813L9 16.0312ZM4.78125 2.8125C3.27825 2.8125 1.6875 4.122 1.6875 6.1875C1.6875 8.60625 3.465 10.8495 5.47312 12.5798C6.56874 13.5169 7.74949 14.3496 9 15.0671C10.2505 14.3496 11.4313 13.5169 12.5269 12.5798C14.535 10.8495 16.3125 8.60625 16.3125 6.1875C16.3125 4.122 14.7218 2.8125 13.2188 2.8125C11.6741 2.8125 10.2836 3.92175 9.81112 5.5755C9.76137 5.75232 9.6552 5.90804 9.50877 6.01895C9.36235 6.12986 9.18369 6.18989 9 6.18989C8.81631 6.18989 8.63765 6.12986 8.49123 6.01895C8.3448 5.90804 8.23863 5.75232 8.18888 5.5755C7.71637 3.92175 6.32587 2.8125 4.78125 2.8125Z'
            fill='#9FA3AF'></path></svg
        >
        <span class='count'>0</span>
      </span>
      <span id='recasts' class='engagement-item'>
        <svg width='19' height='18' viewBox='0 0 19 18' fill='none'
          ><path
            d='M2.41813 9.00562C2.5282 8.99243 2.63979 9.00106 2.74652 9.03101C2.85326 9.06096 2.95305 9.11166 3.04018 9.18019C3.12732 9.24873 3.20009 9.33377 3.25434 9.43044C3.3086 9.52712 3.34327 9.63354 3.35638 9.74362C3.49975 10.9294 3.98324 12.0483 4.7485 12.9653C5.51375 13.8823 6.52806 14.5583 7.669 14.9115C8.80994 15.2648 10.0287 15.2803 11.1783 14.9562C12.3279 14.632 13.359 13.9821 14.1474 13.0849L12.7929 11.7304C12.7534 11.691 12.7266 11.6409 12.7157 11.5863C12.7048 11.5316 12.7104 11.475 12.7317 11.4235C12.753 11.3721 12.7891 11.3281 12.8355 11.2972C12.8818 11.2663 12.9363 11.2499 12.992 11.25H17.0938C17.1683 11.25 17.2399 11.2796 17.2926 11.3324C17.3454 11.3851 17.375 11.4567 17.375 11.5312V15.633C17.3751 15.6887 17.3587 15.7432 17.3278 15.7895C17.2969 15.8359 17.2529 15.872 17.2014 15.8933C17.15 15.9146 17.0934 15.9202 17.0387 15.9093C16.9841 15.8984 16.934 15.8716 16.8946 15.8321L15.3421 14.2796C14.3288 15.3996 13.0148 16.2046 11.5568 16.5988C10.0988 16.993 8.55817 16.9597 7.11854 16.5029C5.67891 16.0461 4.40095 15.1851 3.43693 14.0224C2.47291 12.8597 1.86348 11.4443 1.68125 9.945C1.66806 9.83493 1.67668 9.72333 1.70664 9.6166C1.73659 9.50986 1.78729 9.41008 1.85582 9.32294C1.92436 9.23581 2.0094 9.16303 2.10607 9.10878C2.20275 9.05452 2.30917 9.01985 2.41925 9.00675L2.41813 9.00562ZM9.5 2.8125C8.62026 2.81157 7.75049 2.99869 6.94897 3.36132C6.14745 3.72396 5.4327 4.25372 4.85263 4.91512L6.20713 6.26962C6.24656 6.30896 6.27343 6.35912 6.28432 6.41374C6.29522 6.46836 6.28965 6.52499 6.26832 6.57644C6.24699 6.6279 6.21086 6.67186 6.16452 6.70276C6.11817 6.73366 6.0637 6.7501 6.008 6.75H1.90625C1.83166 6.75 1.76012 6.72037 1.70738 6.66762C1.65463 6.61488 1.625 6.54334 1.625 6.46875V2.367C1.6249 2.3113 1.64134 2.25682 1.67224 2.21048C1.70314 2.16414 1.7471 2.12801 1.79855 2.10668C1.85001 2.08535 1.90663 2.07978 1.96126 2.09068C2.01588 2.10157 2.06604 2.12844 2.10538 2.16787L3.65788 3.72037C4.67122 2.6004 5.98518 1.79536 7.4432 1.40118C8.90122 1.00699 10.4418 1.04029 11.8815 1.49708C13.3211 1.95388 14.5991 2.81493 15.5631 3.97763C16.5271 5.14033 17.1365 6.55566 17.3187 8.055C17.3453 8.27728 17.2825 8.50101 17.1441 8.67697C17.0057 8.85292 16.803 8.96669 16.5807 8.99325C16.3585 9.0198 16.1347 8.95697 15.9588 8.81856C15.7828 8.68016 15.6691 8.47753 15.6425 8.25525C15.4605 6.75419 14.7352 5.37173 13.6035 4.36895C12.4718 3.36617 11.0121 2.8125 9.5 2.8125Z'
            fill='#9FA3AF'></path></svg
        >
        <span class='count'>0</span>
      </span>
      <span id='replies' class='engagement-item'>
        <svg width='19' height='18' viewBox='0 0 19 18' fill='none'
          ><path
            d='M1.625 3.09375C1.625 2.007 2.507 1.125 3.59375 1.125H15.4062C16.493 1.125 17.375 2.007 17.375 3.09375V11.5312C17.375 12.0534 17.1676 12.5542 16.7984 12.9234C16.4292 13.2926 15.9284 13.5 15.4062 13.5H10.6925L7.79787 16.3946C7.56843 16.6232 7.27646 16.7787 6.95876 16.8416C6.64106 16.9045 6.31185 16.8719 6.01263 16.748C5.71341 16.6241 5.45757 16.4144 5.27736 16.1453C5.09716 15.8762 5.00065 15.5597 5 15.2359V13.5H3.59375C3.07161 13.5 2.57085 13.2926 2.20163 12.9234C1.83242 12.5542 1.625 12.0534 1.625 11.5312V3.09375ZM3.59375 2.8125C3.51916 2.8125 3.44762 2.84213 3.39488 2.89488C3.34213 2.94762 3.3125 3.01916 3.3125 3.09375V11.5312C3.3125 11.6865 3.4385 11.8125 3.59375 11.8125H5.84375C6.06753 11.8125 6.28214 11.9014 6.44037 12.0596C6.59861 12.2179 6.6875 12.4325 6.6875 12.6562V15.12L9.7475 12.06C9.82574 11.9816 9.91867 11.9194 10.021 11.8769C10.1233 11.8344 10.233 11.8125 10.3438 11.8125H15.4062C15.4808 11.8125 15.5524 11.7829 15.6051 11.7301C15.6579 11.6774 15.6875 11.6058 15.6875 11.5312V3.09375C15.6875 3.01916 15.6579 2.94762 15.6051 2.89488C15.5524 2.84213 15.4808 2.8125 15.4062 2.8125H3.59375Z'
            fill='#9FA3AF'></path></svg
        >
        <span class='count'>0</span>
      </span>
    </div>
    <a href='' target='_blank' class='farcaster-link' id='farcasterLink'>View on Farcaster</a>
  </div>

  <div id='errorMessage' class='error-message'></div>
</div>

<style>
  .social-card {
    border: 1px solid var(--foreground);
    border-radius: 1.5rem;
    padding: 16px;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    box-shadow: var(--smooth-shadow);
  }

  .social-card * {
    font-family: var(--font-family-mono) !important;
    font-size: 12px;
  }

  .user-info {
    display: flex;
    align-items: center;
    gap: 12px;

    padding-bottom: 12px;
    border-bottom: 1px solid var(--foreground);
  }

  .profile-pic {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    margin-right: 12px;
  }

  .user-details h2 {
    font-weight: bold;
    font-size: 16px;
    margin: 0;
  }

  .user-details p {
    margin: 4px 0;
  }

  .user-details-row {
    display: flex;
    gap: 12px;
  }

  .post-text {
    font-size: 14px !important;
  }

  .post-text:empty {
    display: none;
  }

  .embed-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 12px;
    border: 1px solid var(--foreground);
    border-radius: 8px;
    padding: 12px;
    @media (max-width: 899px) {
      grid-template-columns: 1fr;
    }
  }

  .embed-content:empty {
    display: none;
  }

  .post-meta {
    display: flex;
    gap: 12px;
    padding-top: 12px;
    border-top: 1px solid var(--foreground);
    flex-wrap: wrap;
  }

  .engagement {
    display: flex;
    gap: 8px;
  }

  .engagement-item {
    display: flex;
    align-items: center;
    gap: 4px;
  }

  .icon {
    width: 16px;
    height: 16px;
  }

  .farcaster-link {
    margin-left: auto;
    text-decoration: underline;
    @media (max-width: 1280px) {
      margin-left: unset;
    }
  }

  .error-message {
    color: red;
    font-weight: bold;
    text-align: center;
    display: none;
  }

  .social-card {
    display: none;
  }

  .social-card.loaded {
    display: flex;
  }
</style>

<style is:global>
  .embed-content * {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 4px;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    function updateFarcasterPost() {
      const socialCard = document.querySelector(".social-card") as HTMLElement;
      const errorMessage = document.getElementById("errorMessage") as HTMLElement;

      fetch("/api/farcaster-latest-post")
        .then((response) => {
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then((data) => {
          if (data.error) {
            throw new Error(data.error);
          }

          const { author, cast, channel, embed } = data.postData;

          // Update profile information
          (document.getElementById("profilePic") as HTMLImageElement).src = author.pfpUrl;
          document.getElementById("displayName")!.textContent = author.displayName;
          document.getElementById("username")!.textContent = `@${author.username}`;

          // Update post content
          const postTextElement = document.getElementById("postText")!;
          postTextElement.innerHTML = cast.text.replace(/\n/g, "<br>");

          // Handle embed content
          const embedContentElement = document.getElementById("embedContent")!;
          embedContentElement.innerHTML = "";
          if (embed) {
            const embedPromises = embed.map(async (embedItem) => {
              try {
                const response = await fetch(embedItem.url.url, { method: "HEAD" });
                const contentType = response.headers.get("Content-Type");
                let embedElement;

                if (contentType?.startsWith("image/")) {
                  embedElement = document.createElement("img");
                  embedElement.src = embedItem.url.url;
                  embedElement.alt = "Embedded image";
                  embedElement.setAttribute("data-zoomable", "");
                } else if (contentType?.startsWith("video/")) {
                  embedElement = document.createElement("video");
                  embedElement.controls = true;
                  const sourceElement = document.createElement("source");
                  sourceElement.src = embedItem.url.url;
                  sourceElement.type = contentType;
                  embedElement.appendChild(sourceElement);
                } else if (contentType?.startsWith("audio/")) {
                  embedElement = document.createElement("audio");
                  embedElement.controls = true;
                  const sourceElement = document.createElement("source");
                  sourceElement.src = embedItem.url.url;
                  sourceElement.type = contentType;
                  embedElement.appendChild(sourceElement);
                } else {
                  embedElement = document.createElement("iframe");
                  embedElement.src = embedItem.url.url;
                  embedElement.frameBorder = 0;
                }

                embedElement.className = "embed-content";
                embedContentElement.appendChild(embedElement);
              } catch (error) {
                console.error("Error fetching the URL:", error);
                // Handle error or display a placeholder
              }
            });

            Promise.all(embedPromises).then(() => {
              // Reinitialize zoom after all embeds have been added
              zoom.detach();
              // initializeZoom();
            });
          }

          // Update post metadata
          function timeSince(date) {
            const seconds = Math.floor((new Date().getTime() - new Date(date).getTime()) / 1000);
            let interval = Math.floor(seconds / 31536000);

            if (interval >= 1) return interval + "y";
            interval = Math.floor(seconds / 2592000);
            if (interval >= 1) return interval + "mo";
            interval = Math.floor(seconds / 86400);
            if (interval >= 1) return interval + "d";
            interval = Math.floor(seconds / 3600);
            if (interval >= 1) return interval + "h";
            interval = Math.floor(seconds / 60);
            if (interval >= 1) return interval + "m";
            return Math.floor(seconds) + "s";
          }

          document.getElementById("timestamp")!.textContent = timeSince(cast.timestamp);
          const channelLinkElement = document.getElementById("channelLink") as HTMLAnchorElement;
          if (channel) {
            channelLinkElement.href = `https://warpcast.com/~/channel/${channel.name}`;
            channelLinkElement.textContent = `/${channel.name}`;
            channelLinkElement.style.display = "inline";
          } else {
            channelLinkElement.style.display = "none";
          }
          document.querySelector("#reactions .count")!.textContent = cast.reactionCount.toString();
          document.querySelector("#recasts .count")!.textContent = cast.recastCount.toString();
          document.querySelector("#replies .count")!.textContent = cast.replyCount.toString();

          // Update the "View on Farcaster" link
          const farcasterLink = document.getElementById("farcasterLink") as HTMLAnchorElement;
          farcasterLink.href = `https://warpcast.com/${author.username}/${cast.hash}`;

          socialCard.classList.add("loaded");
          socialCard.classList.remove("error");
          errorMessage.style.display = "none";
        })
        .catch((err) => {
          console.error("Error fetching data:", err);
          errorMessage.textContent = "Failed to load the latest Farcaster post. Please try again later.";
          errorMessage.style.display = "block";
          socialCard.classList.add("error");
          socialCard.classList.remove("loaded");
        });
    }

    updateFarcasterPost();
  });
</script>
