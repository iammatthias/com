---
import Layout from "@layouts/layout.astro";
import { getObsidianEntries } from "@lib/github";
import Image from "@components/img.astro";
import Paragraph from "@components/paragraph.astro";

import { Markdown } from "astro-remote";

const { path, slug } = Astro.params;

const paths = ["photographs", "posts", "recipes", "notes" /* add other content types here */];

if (!path || !paths.includes(path)) {
  return (
    {
      status: 404,
      error: "Content type not found",
    },
    Astro.redirect("/404")
  );
}

const entry = await getObsidianEntries(path, slug);

if (!entry) {
  return (
    {
      status: 404,
      error: "Entry not found",
    },
    Astro.redirect("/404")
  );
}

if (!entry || (process.env.NODE_ENV === "production" && entry.frontmatter.published === false)) {
  return (
    {
      status: 404,
      error: "Entry not found",
    },
    Astro.redirect("/404")
  );
}

if (!entry) {
  return (
    {
      status: 404,
      error: "Entry not found",
    },
    Astro.redirect("/404")
  );
}

const { body, frontmatter } = entry;

// Convert the timestamps to Date objects
const createdAtDate = new Date(frontmatter.created);
const updatedAtDate = new Date(frontmatter.updated);

// Calculate the difference in milliseconds
const difference = updatedAtDate.getTime() - createdAtDate.getTime();

// Check if the difference is more than 24 hours
const isUpdatedAfter24Hours = difference > 24 * 60 * 60 * 1000;
---

<Layout title={`${path} | ${frontmatter.title}`}>
  <main>
    <div class='meta'>
      <p><small><a href={`/${path}`}>« View more {path}</a></small></p>
      <h1>{frontmatter.title}</h1>
      <p>
        <small>
          This post was first published at <time datetime={frontmatter.created}>{frontmatter.created}</time>. {
            isUpdatedAfter24Hours && (
              <time datetime={frontmatter.updated}>It was last updated at {frontmatter.updated}</time>
            )
          }
        </small>
      </p>
      {
        frontmatter.tags && frontmatter.tags.length > 0 && (
          <div class='tags'>
            {frontmatter.tags.map((tag: string) => (
              <span>
                <small>
                  <a href={`/tags/${tag}`}>#{tag}</a>
                </small>
              </span>
            ))}
          </div>
        )
      }
    </div>
    <article>
      <Markdown
        components={{ img: Image, p: Paragraph }}
        sanitize={{
          dropElements: ["head", "style"],
          allowCustomElements: true,
        }}
      >
        {body}
      </Markdown>
    </article>
    <p><small><a href={`/${path}`}>« View more {path}</a></small></p>
  </main>
</Layout>

<style>
  article {
    max-width: 800px;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  article:has(.masonry) {
    max-width: unset;
    grid-gap: 2rem;
  }

  /* Extra small devices (portrait phones, less than 576px) */
  @media (max-width: 575px) {
    article:has(.masonry) {
      max-width: unset;
      grid-gap: 1rem;
    }
  }

  .tags {
    display: flex;
    gap: 0.5rem;
  }
</style>
