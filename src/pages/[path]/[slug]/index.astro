---
import { getCollection } from "astro:content";
import { Markdown } from "astro-remote";

// layouts
import PageLayout from "@/layouts/PageLayout.astro";

// components
import Paragraph from "@/components/MDX/Paragraph.astro";
import Img from "@/components/MDX/Img.astro";
import OfficeSpace from "@/components/MDX/OfficeSpace.astro";
import Vimeo from "@components/MDX/Vimeo.astro";
import Grid from "@components/MDX/Grid.astro";
import Link from "@components/MDX/Link.astro";
export async function getStaticPaths() {
  const [posts, art, notes, recipes] = await Promise.all([
    getCollection("posts"),
    getCollection("art"),
    getCollection("notes"),
    getCollection("recipes"),
  ]);

  // Combine all collections into one array
  const allContent = [...posts, ...art, ...notes, ...recipes];

  // Filter entries to ensure they have path and slug
  const entries = allContent
    .filter((entry) => entry.data?.path && entry.data?.slug)
    .map((entry) => ({
      params: { path: entry.data.path, slug: entry.data.slug },
      props: {
        entry: {
          ...entry,
        },
      },
    }));

  return entries;
}

const { path } = Astro.params;
const { entry } = Astro.props;

const components = {
  p: Paragraph,
  img: Img,
  OfficeSpace,
  Vimeo,
  Grid,
};
---

<PageLayout title={entry.data.title} path={path}>
  <main>
    <section class='header'>
      <p class='small capitalize'><a href={`/${entry.data.path}`}>{entry.data.path}</a></p>
      <h1>{entry.data.title}</h1>
      <p>
        Published {new Date(entry.data.created).toLocaleDateString()}.
        {
          new Date(entry.data.updated).getTime() - new Date(entry.data.created).getTime() > 24 * 60 * 60 * 1000 &&
            `Last updated ${new Date(entry.data.updated).toLocaleDateString()}.`
        }
      </p>
      <div class='tags'>
        {
          entry.data.tags.map((tag: any) => (
            <span class='small'>
              #<a href={`/tags/${tag}`}>{tag}</a>
            </span>
          ))
        }
      </div>
    </section>
    <article>
      <!-- <Content /> -->
      <Markdown sanitize={{ allowComponents: true }} content={entry.body} components={{ ...components }} />
    </article>
  </main>
</PageLayout>

<script src='https://player.vimeo.com/api/player.js'></script>

<style>
  main {
    width: 100%;
    min-height: calc(100vh - var(--nav-height) - var(--footer-height) - 4px);
    min-height: calc(100vh - var(--nav-height) - var(--footer-height) - 4px);
  }

  .header {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: var(--padding);
    border-left: var(--border);
    border-right: var(--border);
    border-bottom: var(--border);
    max-width: 800px;
    width: 100%;
    margin: 0 auto;
    @media (max-width: 800px) {
      border-left: none;
      border-right: none;
    }
  }

  article {
    display: flex;
    flex-direction: column;
    min-height: calc(100vh - var(--nav-height) - var(--footer-height) - var(--header-height));
  }

  article > :global(*) {
    border-left: var(--border);
    border-right: var(--border);
    max-width: 800px;
    width: 100%;
    margin: 0 auto;
    padding: var(--padding);
    &:not(:last-child) {
      padding-bottom: 0;
    }
    &:has(+ .office-space, + script, + style) {
      padding-bottom: var(--padding);
    }
    @media (max-width: 800px) {
      border-left: none;
      border-right: none;
    }
  }

  article > :global(.office-space) {
    padding: 0;
    border: var(--border);
    max-width: 80vw;
    width: 100%;
    margin: 0 auto;
    overflow-x: scroll;
    &:last-child {
      margin-bottom: var(--padding);
    }

    @media (max-width: 800px) {
      max-width: unset;

      width: calc(100vw - 4rem);
    }
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .small {
    font-size: 0.8rem;
  }
</style>
