---
import { render, getCollection } from "astro:content";

// layouts
import PageLayout from "@/layouts/PageLayout.astro";

export async function getStaticPaths() {
  const [posts, art, notes, recipes] = await Promise.all([
    getCollection("posts"),
    getCollection("art"),
    getCollection("notes"),
    getCollection("recipes"),
  ]);

  // Combine all collections into one array
  const allContent = [...posts, ...art, ...notes, ...recipes];

  // Filter entries to ensure they have path and slug
  const entries = allContent
    .filter((entry) => entry.data.frontmatter?.path && entry.data.frontmatter?.slug)
    .map((entry) => ({
      params: { path: entry.data.frontmatter.path, slug: entry.data.frontmatter.slug },
      props: {
        entry: {
          ...entry,
        },
      },
    }));

  return entries;
}

const { path } = Astro.params;
const { entry } = Astro.props;

const { Content } = await render(entry);
---

<PageLayout title={entry.data.frontmatter.title} path={path}>
  <main>
    <section class='header'>
      <small class='capitalize'><a href={`/${entry.data.frontmatter.path}`}>{entry.data.frontmatter.path}</a></small>
      <h1>{entry.data.frontmatter.title}</h1>
      <p>
        Published {new Date(entry.data.frontmatter.created).toLocaleDateString()}.
        {
          new Date(entry.data.frontmatter.updated).getTime() - new Date(entry.data.frontmatter.created).getTime() >
            24 * 60 * 60 * 1000 && `Last updated ${new Date(entry.data.frontmatter.updated).toLocaleDateString()}.`
        }
      </p>
      <div class='tags'>
        {
          entry.data.frontmatter.tags.map((tag: any) => (
            <span class='small'>
              #<a href={`/tags/${tag}`}>{tag}</a>
            </span>
          ))
        }
      </div>
    </section>
    <article>
      <Content />
    </article>
  </main>
</PageLayout>

<style>
  main {
    max-width: 800px;
    min-height: calc(100vh - var(--nav-height) - var(--footer-height) - 4px);
    margin: 0 auto;
    outline: var(--border);
  }

  .header {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: var(--padding);
    border-bottom: var(--border);
  }

  article {
    padding: var(--padding);
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  article > :global(pre) {
    max-width: calc(100vw - 4rem);
  }

  article :global(*) {
    word-break: break-all;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
</style>
