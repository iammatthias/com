---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

const { showTags = true, showGlass = false, collection = "all", contentLimit } = Astro.props;

// Optimize type definitions
type ContentType = "posts" | "art" | "notes" | "recipes";
type BaseEntry = {
  type: string;
};

interface ContentEntry extends BaseEntry {
  type: "content";
  title: string;
  slug: string;
  created: string;
  updated: string;
  published: boolean;
  tags: string[];
  path: string;
}

interface GlassEntry extends BaseEntry {
  type: "glass";
  width: number;
  height: number;
  src: string;
  share_url: string;
}

type ContentCollectionEntry = CollectionEntry<"posts" | "art" | "notes" | "recipes">;
type GlassCollectionEntry = CollectionEntry<"glass">;

// Get collections efficiently
const collections = new Map<string, Promise<ContentCollectionEntry[] | GlassCollectionEntry[]>>([
  ["posts", getCollection("posts")],
  ["art", getCollection("art")],
  ["notes", getCollection("notes")],
  ["recipes", getCollection("recipes")],
  ["glass", getCollection("glass")],
]);

// Type guard functions
const isContentEntry = (entry: any): entry is ContentCollectionEntry => {
  return entry?.data?.title && entry?.data?.created && entry?.data?.slug;
};

const isGlassEntry = (entry: any): entry is GlassCollectionEntry => {
  return entry?.data?.image640x640 && entry?.data?.width && entry?.data?.height;
};

// Efficient content fetching
const getContentEntries = async (): Promise<ContentCollectionEntry[]> => {
  if (collection === "all") {
    const results = await Promise.all(["posts", "art", "notes", "recipes"].map((key) => collections.get(key)));
    return results.flat().filter(isContentEntry);
  }
  const result = (await collections.get(collection)) || [];
  return result.filter(isContentEntry);
};

// Process content efficiently
const contentEntries = await getContentEntries();
const validContent = contentEntries.filter((entry) => entry?.data?.created);

// Optimize sorting
const sortedContent = validContent
  .sort((a, b) => Number(new Date(b.data.created)) - Number(new Date(a.data.created)))
  .slice(0, contentLimit || validContent.length);

// Transform to ContentEntry efficiently
const firstEntries: ContentEntry[] = sortedContent.map((entry) => ({
  type: "content",
  title: entry.data.title,
  slug: entry.data.slug,
  created: entry.data.created,
  updated: entry.data.updated,
  published: entry.data.published,
  tags: entry.data.tags,
  path: entry.data.path,
}));

// Process glass entries efficiently
const glassEntries: GlassEntry[] = showGlass
  ? ((await collections.get("glass")) || [])
      .filter(isGlassEntry)
      .sort((a, b) => Number(new Date(b.data.created_at)) - Number(new Date(a.data.created_at)))
      .slice(0, Math.floor(firstEntries.length / 3))
      .map((entry) => ({
        type: "glass",
        width: entry.data.width,
        height: entry.data.height,
        src: entry.data.image640x640,
        share_url: entry.data.share_url,
      }))
  : [];

// Optimize combination logic
const combinedEntries = showGlass
  ? firstEntries.reduce(
      (acc, entry, index) => {
        const glassIndex = Math.floor(index / 3);
        if (glassIndex < glassEntries.length && index % 3 === 0) {
          acc.push(glassEntries[glassIndex], entry);
        } else {
          acc.push(entry);
        }
        return acc;
      },
      [] as (ContentEntry | GlassEntry)[]
    )
  : firstEntries;
---

{
  combinedEntries.map((entry) =>
    entry.type === "glass" ? (
      <div class='glass-content'>
        <a href={entry.share_url} target='_blank' rel='noopener noreferrer'>
          <img src={entry.src} width={entry.width} height={entry.height} alt='Glass photo' loading='lazy' />
        </a>
      </div>
    ) : (
      <div class='recent-content'>
        <p>
          <a href={`/${entry.path}`}>{entry.path}</a>
        </p>
        <h2>
          <a href={`/${entry.path}/${entry.slug}`}>{entry.title}</a>
        </h2>

        {showTags && (
          <div class='tags'>
            {entry.tags.map((tag) => (
              <span class='small'>
                #<a href={`/tags/${tag}`}>{tag}</a>
              </span>
            ))}
          </div>
        )}
        <p class='align-bottom small'>
          <a href={`/${entry.path}/${entry.slug}`}>
            Published {new Date(entry.created).toLocaleDateString()}
            <br />
            {new Date(entry.updated).getTime() - new Date(entry.created).getTime() > 24 * 60 * 60 * 1000 &&
              `Last updated ${new Date(entry.updated).toLocaleDateString()}`}
          </a>
        </p>
      </div>
    )
  )
}

<style>
  h2 {
    font-size: var(--fs-h3);
  }

  .glass-content,
  .recent-content {
    position: relative;
    box-shadow: 0 0 0 0 light-dark(rgba(255, 187, 0, 0), rgba(255, 255, 255, 0));
    transition: box-shadow 0.3s ease-in-out;

    &:hover {
      box-shadow: 0 0 10px light-dark(var(--gold), var(--white));
      z-index: 10;
    }
  }

  .glass-content {
    display: block;
    line-height: 0;
    aspect-ratio: 6/7;
    object-fit: cover;
    overflow: hidden;
  }

  .glass-content img {
    width: 100%;
    height: 100%;
  }

  .recent-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .align-bottom {
    margin-top: auto;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .small {
    font-size: 0.8rem;
  }
</style>
