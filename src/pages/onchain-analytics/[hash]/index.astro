---
export const prerender = false;
import PageLayout from "@/layouts/PageLayout.astro";

function hashToNumbers(hash: string): number[] {
  const cleanHash = hash.replace("0x", "");
  return Array.from({ length: cleanHash.length / 2 }, (_, i) => parseInt(cleanHash.slice(i * 2, (i + 1) * 2), 16));
}

function generatePatternData(hash: string) {
  const numbers = hashToNumbers(hash);

  // Generate background fill pattern
  function generateBackgroundPattern(): string[] {
    const patterns: string[] = [];

    const gridSizeX = 24;
    const gridSizeY = 28; // Adjusted for 6:7 ratio
    for (let x = 0; x < gridSizeX; x++) {
      for (let y = 0; y < gridSizeY; y++) {
        const baseX = (x / gridSizeX) * 120;
        const baseY = (y / gridSizeY) * 140;
        const offsetX = (numbers[(x + y) % numbers.length] / 255 - 0.5) * 4;
        const offsetY = (numbers[(x + y + 1) % numbers.length] / 255 - 0.5) * 4;
        const size = 0.15 + (numbers[(x * y) % numbers.length] / 255) * 0.2;

        patterns.push(
          `M ${baseX + offsetX},${baseY + offsetY} m ${-size},0 a ${size},${size} 0 1,0 ${size * 2},0 a ${size},${size} 0 1,0 ${-size * 2},0`
        );
      }
    }
    return patterns;
  }

  function generatePrimaryRegions(): { centers: [number, number][]; paths: string[] } {
    const centers: [number, number][] = [];
    const numRegions = 12 + (numbers[0] % 4); // Increased for larger canvas

    // Create a grid of centers adjusted for 6:7 ratio
    const gridSizeX = 5;
    const gridSizeY = 6;
    for (let x = 0; x < gridSizeX; x++) {
      for (let y = 0; y < gridSizeY; y++) {
        const baseX = 20 + (x * 80) / (gridSizeX - 1);
        const baseY = 20 + (y * 100) / (gridSizeY - 1);
        const offsetX = (numbers[(x + y) % numbers.length] / 255 - 0.5) * 15;
        const offsetY = (numbers[(x + y + 1) % numbers.length] / 255 - 0.5) * 15;
        centers.push([baseX + offsetX, baseY + offsetY]);
      }
    }

    // Add random centers for organic feel
    for (let i = 0; i < numRegions - gridSizeX * gridSizeY; i++) {
      const angle = (numbers[i] / 255) * Math.PI * 2;
      const distance = 20 + (numbers[i + 1] / 255) * 45;
      centers.push([60 + Math.cos(angle) * distance, 70 + Math.sin(angle) * distance]);
    }

    const paths: string[] = centers.map((center, i) => {
      const points: [number, number][] = [];
      const numPoints = 24;

      for (let j = 0; j < numPoints; j++) {
        const angle = (j / numPoints) * Math.PI * 2;
        const noise = (numbers[(i + j) % numbers.length] / 255) * 20;
        const baseDistance = 35 + (numbers[(i * 2 + j) % numbers.length] / 255) * 25;
        const distance = baseDistance + noise;

        points.push([center[0] + Math.cos(angle) * distance, center[1] + Math.sin(angle) * distance]);
      }

      return (
        `M ${points[0][0]},${points[0][1]} ` +
        points
          .slice(1)
          .map((p) => `L ${p[0]},${p[1]}`)
          .join(" ") +
        " Z"
      );
    });

    return { centers, paths };
  }

  function generateCellPacking(regionCenter: [number, number], regionIndex: number): string[] {
    const cells: string[] = [];
    const regionRadius = 55;

    // Create dense spiral patterns
    const numSpirals = 4 + (numbers[regionIndex] % 3);
    for (let s = 0; s < numSpirals; s++) {
      const startAngle = (numbers[s * regionIndex] / 255) * Math.PI * 2;
      let angle = startAngle;
      let radius = 1;

      const maxDots = 60;
      let dotCount = 0;

      while (radius < regionRadius && dotCount < maxDots) {
        const angleNoise = (numbers[(Math.floor(angle * 5) + s) % numbers.length] / 255 - 0.5) * 0.4;
        const radiusStep = 1.2 + numbers[(s * dotCount) % numbers.length] / 255;

        angle += 0.3 + angleNoise;
        radius += radiusStep;

        const px = regionCenter[0] + Math.cos(angle) * radius;
        const py = regionCenter[1] + Math.sin(angle) * radius;

        const dotSize = 0.5 + (numbers[(dotCount * s) % numbers.length] / 255) * 0.7;

        cells.push(
          `M ${px},${py} m ${-dotSize},0 a ${dotSize},${dotSize} 0 1,0 ${dotSize * 2},0 a ${dotSize},${dotSize} 0 1,0 ${-dotSize * 2},0`
        );

        dotCount++;
      }
    }

    // Add dense scattered fill
    const numScatterDots = 40 + (numbers[regionIndex] % 20);
    for (let i = 0; i < numScatterDots; i++) {
      const angle = (numbers[(regionIndex * i) % numbers.length] / 255) * Math.PI * 2;
      const radius = (numbers[(regionIndex * i + 1) % numbers.length] / 255) * regionRadius;

      const px = regionCenter[0] + Math.cos(angle) * radius;
      const py = regionCenter[1] + Math.sin(angle) * radius;

      const dotSize = 0.3 + (numbers[(i * 3) % numbers.length] / 255) * 0.5;

      cells.push(
        `M ${px},${py} m ${-dotSize},0 a ${dotSize},${dotSize} 0 1,0 ${dotSize * 2},0 a ${dotSize},${dotSize} 0 1,0 ${-dotSize * 2},0`
      );
    }

    return cells;
  }

  function generateTuringPattern(regionCenter: [number, number], regionIndex: number): string[] {
    const lines: string[] = [];
    const regionRadius = 55;

    // Generate dense line coverage
    const numLines = 15 + (numbers[regionIndex] % 10);
    for (let i = 0; i < numLines; i++) {
      const points: [number, number][] = [];
      let x = regionCenter[0] + (numbers[i] / 255 - 0.5) * regionRadius;
      let y = regionCenter[1] + (numbers[i + 1] / 255 - 0.5) * regionRadius;

      const numSegments = 20 + (numbers[i * 2] % 15);
      for (let j = 0; j < numSegments; j++) {
        points.push([x, y]);

        const angleChange = (numbers[(i * j) % numbers.length] / 255 - 0.5) * Math.PI * 1.8;
        const stepSize = 2.5 + (numbers[(i * j + 1) % numbers.length] / 255) * 4;

        x += Math.cos(angleChange) * stepSize;
        y += Math.sin(angleChange) * stepSize;
      }

      if (points.length > 2) {
        const path = points.reduce((acc, point, idx) => {
          if (idx === 0) return `M ${point[0]} ${point[1]}`;
          if (idx % 2 === 0) {
            const prev = points[idx - 1];
            const ctrlX = prev[0] + (numbers[(idx * regionIndex) % numbers.length] / 255 - 0.5) * 10;
            const ctrlY = prev[1] + (numbers[(idx * regionIndex + 1) % numbers.length] / 255 - 0.5) * 10;
            return `${acc} Q ${ctrlX} ${ctrlY}, ${point[0]} ${point[1]}`;
          }
          return acc;
        }, "");
        lines.push(path);
      }
    }

    return lines;
  }

  const primaryRegions = generatePrimaryRegions();
  const backgroundPattern = generateBackgroundPattern();
  const patterns = primaryRegions.centers.map((center, i) => {
    // Adjust pattern type distribution for more balanced coverage
    const patternType = numbers[i] > 100; // Changed from 128 to 100 for more cell patterns
    return {
      type: patternType ? "cells" : "turing",
      elements: patternType ? generateCellPacking(center, i) : generateTuringPattern(center, i),
    };
  });

  return {
    background: backgroundPattern,
    regions: primaryRegions.paths,
    patterns,
  };
}

function generateColors(hash: string) {
  const numbers = hashToNumbers(hash);
  const palette: string[] = [];

  // Generate fully hash-derived colors
  for (let i = 0; i < 4; i++) {
    const hue = (numbers[i * 3] / 255) * 360;
    const saturation = 60 + (numbers[i * 3 + 1] / 255) * 40; // Range: 60-100%
    const lightness = 20 + (numbers[i * 3 + 2] / 255) * 65; // Range: 20-85%
    palette.push(`hsl(${hue}, ${saturation}%, ${lightness}%)`);
  }

  // Sort colors by lightness to ensure background is darkest
  const sorted = [...palette].sort((a, b) => {
    const getLightness = (color: string) => {
      const match = color.match(/(\d+)%\)/);
      return match ? parseInt(match[1]) : 0;
    };
    return getLightness(a) - getLightness(b);
  });

  return sorted;
}

const { hash } = Astro.params;
if (!hash) throw new Error("Hash parameter is required");

const patterns = generatePatternData(hash);
const colors = generateColors(hash);
---

<PageLayout path='Onchain Analytics' title={hash}>
  <article>
    <div class='container'>
      <a href='/onchain-analytics' class='back'>image.pngBack</a>
      <svg
        viewBox='-10 -10 140 160'
        preserveAspectRatio='xMidYMid meet'
        xmlns='http://www.w3.org/2000/svg'
        style='display: block;'
      >
        <defs>
          <clipPath id='clip-bg'>
            <rect x='-10' y='-10' width='140' height='160'></rect>
          </clipPath>
        </defs>
        <!-- Background -->
        <rect x='-10' y='-10' width='140' height='160' fill={colors[0]} opacity='0.15'></rect>
        <g clip-path='url(#clip-bg)'>
          <!-- Background Pattern -->
          {patterns.background.map((path) => <path d={path} fill={colors[1]} opacity='0.15' />)}

          <!-- Primary Regions with Patterns -->
          {
            patterns.patterns.map((pattern, i) => (
              <>
                {pattern.type === "cells"
                  ? pattern.elements.map((path) => (
                      <path d={path} fill={colors[1 + (i % (colors.length - 1))]} opacity='0.95' />
                    ))
                  : pattern.elements.map((path) => (
                      <path
                        d={path}
                        fill='none'
                        stroke={colors[1 + (i % (colors.length - 1))]}
                        stroke-width='0.4'
                        opacity='0.9'
                      />
                    ))}
              </>
            ))
          }
        </g>
      </svg>
      <p>{hash}</p>
    </div>
  </article>
</PageLayout>

<style>
  article {
    max-width: 800px;
    width: 100%;
    min-height: calc(100vh - var(--nav-height) - var(--footer-height));
    height: 100%;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: var(--padding);
  }

  .container {
    width: auto;
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    max-height: 90vh;
    /* Prevent overflow and constrain SVG */
    overflow: hidden;
    max-width: 100vw;
  }

  p,
  a {
    font-size: var(--fs-xs);
  }

  svg {
    width: 100%;
    height: auto;
    margin: 0 auto;
    display: block;
    /* Maintain aspect ratio for modern browsers */
    aspect-ratio: 7 / 8;
    max-width: 100%;
    max-height: 80vh;
  }
</style>
