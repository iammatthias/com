---
import Layout from "@layouts/layout.astro";
import Squiggle from "@components/squiggle.astro";
---

<Layout path='Onchain Analytics'>
  <main class='text'>
    <h1>Onchain Analytics</h1>
    <p>
      This site features onchain analytics to track sessions and page counts. If you're interested, you can read more
      about the project here: <a class='break' href='https://iammatthias.com/posts/1712329304675-onchain-hit-counter'
        >iammatthias.com/posts/1712329304675-onchain-hit-counter</a
      >.
    </p>
    <Squiggle />

    <h2>How it Works:</h2>
    <ul>
      <li>
        The client IP, user agent, and timestamp are hashed (keccak256) client-side to generate a unique, irreversible
        <code>sessionID</code>. Only the hash is stored.
      </li>
      <li><code>sessionID</code>s are stored onchain to validate page views without any personal data.</li>
      <li>Page views are counted using a simple incrementing integer attached to each page path.</li>
      <li>
        All onchain interactions are handled by a [syndicate.io](Syndicate.io) <code>Cloud Transaction</code> wallet in the
        background.
      </li>
    </ul>

    <h3>Meta Details</h3>
    <p>
      Data collection began at <a
        href='https://sepolia.basescan.org/tx/0x4081f562fd8c02a07f253f834925f03c4be0096b1f84cb35347580b92511c5c7'
        >block number 9501594 on Base-Sepolia</a
      >. The contract is verified on BaseScan: <a
        class='break'
        href='https://sepolia.basescan.org/address/0xdAe71e132bC8598C1A08C00823Bec9041AeB4A26#code#L1'
        >0xdAe71e132bC8598C1A08C00823Bec9041AeB4A26</a
      >.
    </p>

    <h3>The Data</h3>
    <h4>Sessions</h4>
    <p>There have been <span id='sessionCount'></span> unique sessions since the onchain analytics went live.</p>
    <h4>Page Views</h4>
    <p>Top 5 pages</p>
    <table id='pageViewCounts'>
      <tr><th>Page</th><th>Views</th></tr>
      {
        Array.from({ length: 5 }).map((_, i) => (
          <tr>
            <td id={`page${i}`} />
            <td id={`views${i}`} />
          </tr>
        ))
      }
    </table>

    <h4>Events</h4>
    <p>Top events</p>
    <table id='eventCounts'>
      <tr><th>Event</th><th>Count</th></tr>
      {
        Array.from({ length: 3 }).map((_, i) => (
          <tr>
            <td id={`event${i}`} />
            <td id={`count${i}`} />
          </tr>
        ))
      }
    </table>

    <h4>Portraits of Private Keys</h4>
    <p>
      Our on-chain analytics generates unique keccak256 hashes for each session, and these hashes can also serve as
      valid private keys. The keys are transformed into generative art by using their hexadecimal characters as
      pseudo-random values. It is essential to note that since the hashes are public, they should never be used as
      actual private keys in the wild.
    </p>
    <p>Click on a hash to view its corresponding portrait:</p>
    <div id='sessionIDs'></div>
  </main>
</Layout>

<script>
  // import {getAllPageViewCountsABI, getSessionCountABI, getAllSessionsABI, getAllEventsDataABI} from '../utils/abis.js';
  import { getAllPageViewCounts, getSessionCount, getAllSessions, getAllEventsData } from "@lib/contractProvider";

  document.addEventListener("astro:page-load", async () => {
    // Update session counts
    const getSessionCountData = await getSessionCount();
    const sessionCount = getSessionCountData.toString();

    const sessionCountElement = document.getElementById("sessionCount");
    if (sessionCountElement) {
      sessionCountElement.textContent = sessionCount;
    }

    // Update page counts
    const pageViewCountsData = await getAllPageViewCounts();

    // Combine the data into an array of objects
    const combinedData = pageViewCountsData[0].map((pagePath, index) => ({
      pagePath,
      count: Number(pageViewCountsData[1][index]), // Convert BigInt to Number
    }));

    // Sort the data based on the count property in descending order
    combinedData.sort((a, b) => b.count - a.count);

    combinedData.slice(0, 5).forEach((item, index) => {
      const pageElement = document.getElementById(`page${index}`);
      const viewsElement = document.getElementById(`views${index}`);

      if (pageElement) {
        const linkElement = document.createElement("a");
        linkElement.href = item.pagePath; // Set the href to the page path
        linkElement.textContent = item.pagePath;
        pageElement.appendChild(linkElement);
      }

      if (viewsElement) {
        viewsElement.textContent = item.count;
      }
    });

    // Update event counts
    const eventsData = await getAllEventsData();

    // Combine the data into an array of objects
    const combinedEventData = eventsData[0].map((eventName, index) => ({
      eventName,
      count: Number(eventsData[1][index].count), // Convert BigInt to Number
    }));

    // Sort the data based on the count property in descending order
    combinedEventData.sort((a, b) => b.count - a.count);

    combinedEventData.slice(0, 3).forEach((item, index) => {
      const eventElement = document.getElementById(`event${index}`);
      const countElement = document.getElementById(`count${index}`);

      if (eventElement) {
        eventElement.textContent = item.eventName;
      }

      if (countElement) {
        countElement.textContent = item.count;
      }
    });

    // Update session IDs
    const sessionIDs = await getAllSessions();

    console.log(sessionIDs);

    const sessionIDsElement = document.getElementById("sessionIDs");
    if (!sessionIDsElement) {
      return;
    }

    sessionIDs[0].forEach((sessionID) => {
      const linkElement = document.createElement("a");
      linkElement.href = `/onchain-analytics/${sessionID}`;
      linkElement.textContent = sessionID;
      linkElement.className = "sessionHash";

      sessionIDsElement.appendChild(linkElement);
    });
  });
</script>

<style>
  .text {
    font-size: var(--fs-sm);
  }

  .text th,
  .text td {
    font-family: monospace;
    font-size: 0.9rem;
  }

  .text td {
    word-break: break-all; /* Breaks long words anywhere */
    white-space: normal; /* Allows wrapping */
  }

  #sessionIDs {
    white-space: normal; /* Ensures the normal text wrapping and white-space handling */
  }
</style>

<style is:global>
  .sessionHash {
    font-family: monospace;
    display: inline; /* Keeps span inline */
    word-break: break-all; /* Breaks long words anywhere */
    white-space: normal; /* Allows wrapping */
    margin-right: 0.5rem; /* Adds horizontal space between items */
    transition:
      background-color 0.3s ease,
      color 0.3s ease; /* Smooth transition for background and text color */
  }

  .sessionHash:hover {
    background-color: var(--gold); /* Light grey background on hover */
  }

  .break {
    overflow-wrap: break-word; /* Handles normal wrapping */
    word-break: break-all; /* Forces break for long unbreakable strings */
  }
</style>
