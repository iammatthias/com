---
import { Head } from "astro-capo";
import { SEO } from "astro-seo";
import PostHog from "@components/posthog.astro";
// styles
import "@/styles/reset.css";
import "@/styles/global.css";
import "@/styles/typography.css";

// components
import Footer from "@components/Footer.astro";
import Nav from "@components/Nav.astro";

const { title, path } = Astro.props;

let seoTitle = "@iammatthias";
if (title || path) {
  seoTitle = "";
  if (title) {
    seoTitle += `${title} | `;
  }
  if (path) {
    seoTitle += `${path.charAt(0).toUpperCase() + path.slice(1)} | `;
  }
  seoTitle += "@iammatthias";
}

const base_url = Astro.url.origin;

let seoImage = `${base_url}/api/og.png`;

if (title || path) {
  if (path) {
    seoImage = `${base_url}/api/og-${path}.png`;
  }
  if (title && path) {
    seoImage = `${base_url}/api/og-${path}-${encodeURIComponent(title)}.png`;
  }
}
---

<html lang='en'>
  <Head>
    <meta charset='utf-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1' />
    <link rel='sitemap' href='/sitemap-index.xml' />
    <SEO
      charset='UTF-8'
      title={seoTitle}
      description='A digital garden where photographs, recipes, and thoughts can grow.'
      openGraph={{
        basic: {
          title: seoTitle,
          type: "website",
          image: seoImage,
        },
        optional: {
          description: "A digital garden where photographs, recipes, and thoughts can grow.",
        },
      }}
      twitter={{
        creator: "@iammatthias",
        card: "summary_large_image",
        image: seoImage,
        title: seoTitle,
        description: "A digital garden where photographs, recipes, and thoughts can grow.",
      }}
      extend={{
        link: [
          {
            rel: "icon",
            href: "data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20100%20100%22%3E%3Ctext%20y%3D%22.9em%22%20font-size%3D%2290%22%3E%F0%9F%8C%9E%3C%2Ftext%3E%3C%2Fsvg%3E",
          },
          {
            rel: "sitemap",
            type: "application/xml",
            href: "/sitemap.xml",
          },
        ],
        meta: [
          {
            name: "viewport",
            content: "width=device-width, initial-scale=1",
          },
          {
            name: "generator",
            content: "Astro",
          },
        ],
      }}
    />
    <PostHog />
  </Head>
  <body>
    <Nav />
    <slot />
    <Footer />
  </body>
</html>

<style>
  body {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }
</style>

<script>
  function debounce(func: Function, wait: number) {
    let timeout: ReturnType<typeof setTimeout>;
    return function executedFunction(...args: any[]) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  function updateHeights() {
    const navHeight = document.querySelector("nav")?.clientHeight;
    const footerHeight = document.querySelector("footer")?.clientHeight;

    document.documentElement.style.setProperty("--nav-height", `${navHeight}px`);
    document.documentElement.style.setProperty("--footer-height", `${footerHeight}px`);
  }

  // Initial update
  updateHeights();

  // Debounced update on window resize
  const debouncedUpdateHeights = debounce(updateHeights, 250);
  window.addEventListener("resize", debouncedUpdateHeights);

  // Format time without seconds and update every minute
  const time = document.querySelector("time");
  function updateTime() {
    const now = new Date();
    const formattedTime = now.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
    time!.textContent = formattedTime;
    time!.setAttribute("datetime", now.toISOString());
  }

  updateTime();
  setInterval(updateTime, 60000);
</script>
